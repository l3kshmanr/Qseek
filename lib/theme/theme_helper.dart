import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.gray100,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              8,
            ),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: colorScheme.onPrimaryContainer.withOpacity(1),
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: appTheme.blueGray50,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              22,
            ),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.indigo50,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray600,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray400,
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.blueGray400,
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray5001,
          fontSize: getFontSize(
            10,
          ),
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.blueGray900,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF0D0140),
    primaryContainer: Color(0X1E2E2F3A),
    secondary: Color(0X1E2E2F3A),
    secondaryContainer: Color(0XFF3CC8C8),
    tertiary: Color(0X1E2E2F3A),
    tertiaryContainer: Color(0XFF3CC8C8),

    // Background colors
    background: Color(0X1E2E2F3A),

    // Surface colors
    surface: Color(0X1E2E2F3A),
    surfaceTint: Color(0X145A5555),
    surfaceVariant: Color(0XFF3CC8C8),

    // Error colors
    error: Color(0X145A5555),
    errorContainer: Color(0XFF151517),
    onError: Color(0XFF0D0140),
    onErrorContainer: Color(0XFFFF784B),

    // On colors(text colors)
    onBackground: Color(0X1EFFFFFF),
    onInverseSurface: Color(0XFF0D0140),
    onPrimary: Color(0X145A5555),
    onPrimaryContainer: Color(0X1EFFFFFF),
    onSecondary: Color(0X1EFFFFFF),
    onSecondaryContainer: Color(0X3D1F1D2B),
    onTertiary: Color(0X1EFFFFFF),
    onTertiaryContainer: Color(0X3D1F1D2B),

    // Other colors
    outline: Color(0X145A5555),
    outlineVariant: Color(0X1E2E2F3A),
    scrim: Color(0X1E2E2F3A),
    shadow: Color(0X145A5555),

    // Inverse colors
    inversePrimary: Color(0X1E2E2F3A),
    inverseSurface: Color(0X145A5555),

    // Pending colors
    onSurface: Color(0X1EFFFFFF),
    onSurfaceVariant: Color(0X3D1F1D2B),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue500 => Color(0XFF2196F3);

  // BlueGray
  Color get blueGray300 => Color(0XFF9CA4AB);
  Color get blueGray400 => Color(0XFF78828A);
  Color get blueGray40001 => Color(0XFF888888);
  Color get blueGray50 => Color(0XFFEDF2F7);
  Color get blueGray5001 => Color(0XFFECF1F6);
  Color get blueGray900 => Color(0XFF1F2C37);

  // DeepOrange
  Color get deepOrange700 => Color(0XFFEA501F);
  Color get deepOrangeA200 => Color(0XFFFF6B2C);

  // DeepPurple
  Color get deepPurple400 => Color(0XFF7850AD);
  Color get deepPurple40001 => Color(0XFF8B47AB);

  // Gray
  Color get gray100 => Color(0XFFF6F6F6);
  Color get gray200 => Color(0XFFECECEC);
  Color get gray20001 => Color(0XFFEEEEEE);
  Color get gray30059 => Color(0X59DCDCDC);
  Color get gray50 => Color(0XFFFEF5F5);
  Color get gray500 => Color(0XFF92929D);
  Color get gray5001 => Color(0XFFFCFCFC);
  Color get gray600 => Color(0XFF66707A);
  Color get gray900 => Color(0XFF171725);

  // Green
  Color get green50 => Color(0XFFE6F9F0);
  Color get greenA700 => Color(0XFF00C566);

  // Indigo
  Color get indigo50 => Color(0XFFE3E7EB);
  Color get indigo5001 => Color(0XFFE3E9ED);

  // Orange
  Color get orange500 => Color(0XFFFE970F);

  // Red
  Color get red50 => Color(0XFFFFF2ED);
  Color get red500 => Color(0XFFF54646);
  Color get red5001 => Color(0XFFFFEDED);
  Color get red800 => Color(0XFFCC2229);
  Color get redA200 => Color(0XFFFF4747);

  // Teal
  Color get tealA700 => Color(0XFF00CC9A);

  // White
  Color get whiteA700 => Color(0XFFFEFEFE);
  Color get whiteA70001 => Color(0XFFFDFCFF);
  Color get whiteA70002 => Color(0XFFFCFCFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
